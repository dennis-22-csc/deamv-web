name: Deploy DeamV Web to DigitalOcean

on:
  push:
    branches:
      - master
  
  workflow_dispatch:
    inputs:
      deployment_target: # <-- This is the input key
        description: 'The environment to deploy to (e.g., production, staging)'
        required: true
        default: 'production'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- NEW STEP: Determine & Log Deployment Target ---
      - name: Determine Target & Log
        # Use a fallback value if triggered by 'push' (where github.event.inputs is null)
        run: |
          TARGET="${{ github.event.inputs.deployment_target || 'master-push' }}"
          echo "DEPLOY_TARGET=$TARGET" >> $GITHUB_ENV
          echo "Starting deployment to target: $TARGET"
      # --- END NEW STEP ---

      # 1. Setup Node.js Environment
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.19.0'
          cache: 'npm'

      # 2. Build Next.js Application
      - name: Install dependencies and build Next.js app ðŸš€
        env:
          # All existing secrets are preserved
          NEXT_PUBLIC_GRADED_QUIZ_ENABLED: ${{ secrets.GRADED_QUIZ_ENABLED }}
          NEXT_PUBLIC_NEW_PRACTICE_QUESTIONS_AVAILABLE: ${{ secrets.NEW_PRACTICE_QUESTIONS_AVAILABLE }}
          NEXT_PUBLIC_QUIZ_NUMBER: ${{ secrets.QUIZ_NUMBER }}
          NEXT_PUBLIC_QUIZ_TIME_LIMIT: ${{ secrets.QUIZ_TIME_LIMIT }}
          NEXT_PUBLIC_WHATSAPP_SERVICE_URL: ${{ secrets.WHATSAPP_SERVICE_URL }}
          NEXT_PUBLIC_WHATSAPP_GROUP_JID: ${{ secrets.WHATSAPP_GROUP_JID }}
          NEXT_PUBLIC_GOOGLE_PROJECT_ID: ${{ secrets.GOOGLE_PROJECT_ID }}
          NEXT_PUBLIC_GOOGLE_PRACTICE_SHEET_ID: ${{ secrets.GOOGLE_PRACTICE_SHEET_ID }}
          NEXT_PUBLIC_GOOGLE_TEST_SHEET_ID: ${{ secrets.GOOGLE_TEST_SHEET_ID }}
          NEXT_PUBLIC_GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          NEXT_PUBLIC_GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          NEXT_PUBLIC_GOOGLE_CLIENT_EMAIL: ${{ secrets.GOOGLE_CLIENT_EMAIL }}
          NEXT_PUBLIC_GOOGLE_PRIVATE_KEY: ${{ secrets.GOOGLE_PRIVATE_KEY }}
          NEXT_PUBLIC_GOOGLE_REFRESH_TOKEN: ${{ secrets.GOOGLE_REFRESH_TOKEN }}
          NEXT_PUBLIC_NOTEBOOK_FOLDER_ID: ${{ secrets.NOTEBOOK_FOLDER_ID }}
          NEXT_PUBLIC_DEAMV_FOLDER_ID: ${{ secrets.DEAMV_FOLDER_ID }}
        run: |
          # The secrets are available in the shell environment when npm run build runs
          npm install --force
          npm run build
          
          echo "Starting artifact packaging for target: ${{ env.DEPLOY_TARGET }}"
          mkdir -p build_archive_temp
          
          # 2. Use rsync to copy ONLY necessary files
          rsync -av \
            --exclude 'node_modules' \
            --exclude '.git' \
            --exclude 'nextjs_build.tar.gz' \
            ./ build_archive_temp/
          
          # 3. Create a compressed archive
          tar -czf nextjs_build.tar.gz -C build_archive_temp .
          
          # 4. Clean up
          rm -rf build_archive_temp
          
      # 3. Verify files exist locally before copying
      - name: Verify deployment file locally
        run: |
          echo "Checking local deployment file:"
          ls -la nextjs_build.tar.gz || { echo "ERROR: nextjs_build.tar.gz missing"; exit 1; }
          echo "File size:"
          du -h nextjs_build.tar.gz

      # 4. Copy files to server
      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_SSH_KEY }}
          source: "nextjs_build.tar.gz"
          target: "~/deployments"
          rm: true 

      # 5. SSH into server & deploy
      - name: SSH into server & deploy (without backup)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_SSH_KEY }}
          script: |
            set -e
            echo "Starting Next.js deployment process to target: ${{ env.DEPLOY_TARGET }}"
            
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            BASE_DIR="/var/www/deamv-web" 
            DEPLOY_DIR="$HOME/deployments"
            
            # 6a. Verify deployment file
            echo "Checking for deployment file in $DEPLOY_DIR..."
            if [ ! -f "$DEPLOY_DIR/nextjs_build.tar.gz" ]; then
              echo "ERROR: nextjs_build.tar.gz not found!"
              exit 1
            fi

            # 6b. Deploy Next.js
            echo "Deploying Next.js application..."
            
            TEMP_DIR="/tmp/nextjs_extract_$TIMESTAMP"
            mkdir -p "$TEMP_DIR"
            
            # Extract to a temp directory
            tar -xzf "$DEPLOY_DIR/nextjs_build.tar.gz" -C "$TEMP_DIR"
            
            # Remove old 'current' directory and replace with new build
            rm -rf "${BASE_DIR}/current"
            mv "${TEMP_DIR}" "${BASE_DIR}/current"
            
            # 6c. Install Production Dependencies
            echo "Installing production dependencies..."
            cd "${BASE_DIR}/current"
            npm install --production --prefer-offline 
            npm install --save-dev typescript
            
            # 6d. Restart Next.js Service
            echo "Restarting Next.js service..."
            sudo systemctl daemon-reload
            sudo systemctl restart deamv || echo "Warning: Could not restart Next.js service. Check systemctl."

            # 6e. Cleanup
            echo "Cleaning up deployment files..."
            rm -rf "$DEPLOY_DIR/nextjs_build.tar.gz"
            
            echo "Deployment to ${{ env.DEPLOY_TARGET }} completed successfully! Next.js application is live."
