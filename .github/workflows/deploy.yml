name: Deploy DeamV Web to DigitalOcean

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # 1. Setup Node.js Environment
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.19.0'
          cache: 'npm'

      # =========================================================================
      # 2. ⚠️ NEW STEP: Fetch .env content from Server and Set as GitHub Environment Variables
      # This enables Next.js server routes to read variables during the build.
      # =========================================================================
      - name: Fetch .env from server and inject into build
        uses: appleboy/ssh-action@v1.0.0
        id: fetch_env
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_SSH_KEY }}
          # Command to read the .env file and print it to stdout.
          # The location /root/deamv_env is based on your original script.
          script: |
            cat /root/deamv_env
        
      - name: Export .env content as GitHub Environment Variables
        run: |
          # The output from the previous step's 'cat' command is available here.
          # This line takes the content of the remote file and makes them available 
          # as environment variables for the subsequent steps.
          echo "${{ steps.fetch_env.outputs.stdout }}" >> $GITHUB_ENV
        # The variables are now set and available for the 'npm run build' step.

      # =========================================================================
      # 3. Build Next.js Application (NOW WITH .env VARIABLES INJECTED)
      # =========================================================================
      - name: Install dependencies and build Next.js app
        run: |
          npm install --force
          # The build now runs with the necessary environment variables set from $GITHUB_ENV.
          npm run build
          
          echo "Starting artifact packaging to avoid 'file changed' error..."
          
          # 1. Create a clean temporary directory
          mkdir -p build_archive_temp
          
          # 2. Use rsync to copy ONLY necessary files, excluding node_modules and .git
          # This copies the build artifacts (.next) and source files to the temporary folder
          rsync -av \
            --exclude 'node_modules' \
            --exclude '.git' \
            --exclude 'nextjs_build.tar.gz' \
            ./ build_archive_temp/
          
          # 3. Create a compressed archive of the contents *inside* the temp directory
          # The -C flag changes the directory before creating the archive, ensuring a clean root path
          tar -czf nextjs_build.tar.gz -C build_archive_temp .
          
          # 4. Clean up the temporary folder
          rm -rf build_archive_temp
        
      # 4. Verify files exist locally before copying (Original Step 3)
      - name: Verify deployment file locally
        run: |
          echo "Checking local deployment file:"
          ls -la nextjs_build.tar.gz || { echo "ERROR: nextjs_build.tar.gz missing"; exit 1; }
          echo "File size:"
          du -h nextjs_build.tar.gz

      # 5. Copy files to server (Original Step 4)
      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_SSH_KEY }}
          source: "nextjs_build.tar.gz"
          target: "~/deployments"
          rm: true 

      # 6. SSH into server & deploy (Original Step 5 - MODIFIED)
      - name: SSH into server & deploy with backup rotation
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_SSH_KEY }}
          script: |
            set -e
            echo "Starting Next.js deployment process..."
            
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            BASE_DIR="/var/www/deamv-web" # Target directory for the application
            DEPLOY_DIR="$HOME/deployments"
            
            # --- Utility Function ---
            rotate_backups() {
              local DIR=$1
              if [ -d "$DIR" ]; then
                echo "Creating backup of $DIR"
                # Exclude node_modules from backup to save space/time
                tar -czf "${DIR}_backup_$TIMESTAMP.tar.gz" --exclude=node_modules "$DIR"
                # Keep only the last 3 backups (tar.gz files)
                ls -dt ${DIR}_backup_*.tar.gz 2>/dev/null | tail -n +4 | xargs -r rm -f
              else
                echo "Directory $DIR does not exist, no backup needed"
              fi
            }

            # 6a. Verify deployment file
            echo "Checking for deployment file in $DEPLOY_DIR..."
            if [ ! -f "$DEPLOY_DIR/nextjs_build.tar.gz" ]; then
              echo "ERROR: nextjs_build.tar.gz not found!"
              exit 1
            fi

            # 6b. Deploy Next.js
            echo "Deploying Next.js application..."
            rotate_backups "${BASE_DIR}/current"
            
            TEMP_DIR="/tmp/nextjs_extract_$TIMESTAMP"
            mkdir -p "$TEMP_DIR"
            
            # Extract to a temp directory
            tar -xzf "$DEPLOY_DIR/nextjs_build.tar.gz" -C "$TEMP_DIR"
            
            # Remove old 'current' directory and replace with new build
            rm -rf "${BASE_DIR}/current"
            mv "${TEMP_DIR}" "${BASE_DIR}/current" # Move the extracted folder to the target location
            
            # ⚠️ REMOVED STEP 5c (Copy .env file)
            # The environment variables are now compiled into the build, 
            # so the separate .env file copy is no longer necessary for server routes.
            # You might still need to set environment variables for runtime in your PM2/Systemd setup.

            # 6c. Install Production Dependencies (Original Step 5d)
            echo "Installing production dependencies..."
            cd "${BASE_DIR}/current"
            npm install --production --prefer-offline 
            npm install --save-dev typescript
            
            # 6d. Restart Next.js Service (Original Step 5e)
            echo "Restarting Next.js service..."
            sudo systemctl daemon-reload
            sudo systemctl restart deamv || echo "Warning: Could not restart Next.js service. Check systemctl."

            # 6e. Cleanup (Original Step 5f)
            echo "Cleaning up deployment files..."
            rm -rf "$DEPLOY_DIR/nextjs_build.tar.gz"
            
            echo "Deployment completed successfully! Next.js application is live."
